.版本 2
.支持库 exui
.支持库 EThread
.支持库 spec

.程序集 侧边导航_Ex, Ex_ObjBase, 公开
.程序集变量 _hWnd, 整数型, , , 句柄
.程序集变量 _hObj, 整数型, , , 组件句柄
.程序集变量 _FontPiont, 整数型, , , 字体指针
.程序集变量 _TextmatPiont, 整数型, , , 文本格式指针
.程序集变量 _IconFontPoint, 整数型, , , Fluent图标字体指针
.程序集变量 _IconTextmaPoint, 整数型, , , Fluent图标文本格式指针
.程序集变量 _Width, 整数型, , , 宽度
.程序集变量 _Height, 整数型, , , 高度
.程序集变量 _Top, 整数型, , , 顶边
.程序集变量 _Left, 整数型, , , 左边
.程序集变量 _TextName, 文本型, , , 字体名称
.程序集变量 _TextSize, 整数型, , , 字体大小
.程序集变量 _MenuNum, 整数型, , , 列表数
.程序集变量 _SelectMenu, 整数型, , , 现行选中项
.程序集变量 _BottomMenu, 逻辑型, , , 底部列表
.程序集变量 _Narrow, 逻辑型, , , 收缩状态
.程序集变量 _Item, 导航项, , "0", 导航项
.程序集变量 _Slowmotion, 逻辑型, , , 是否开始缓动效果
.程序集变量 _Progressbar, 图片框_Ex, , , 进度条
.程序集变量 _ProgressColor, 整数型, , , 进度条颜色
.程序集变量 _Progressbarmotion, 逻辑型, , , 是否开始进度条移动
.程序集变量 _ClickFuntion, 子程序指针, , , 事件指针

.程序集变量 _菜单项点燃次数, 整数型
.程序集变量 _导航项点燃次数, 整数型, , "0"
.程序集变量 _空白区点燃次数, 整数型

.子程序 _初始化, , , 当基于本类的对象被创建后，此方法会被自动调用


    

.子程序 _销毁, , , 当基于本类的对象被销毁前，此方法会被自动调用
    

.子程序 创建, 整数型, 公开, 90+1
    .参数 hWnd, 整数型
    .参数 高度, 整数型
    .参数 项目数, 整数型
    .参数 底部列表, 逻辑型, , 真:启用底部列表 假:不启用底部列表
    .参数 进度条颜色, 整数型, 可空
    .局部变量 局_循环计数, 整数型

    ' *****************************************************
    ' 初始化值
    _hWnd ＝ hWnd
    _Width ＝ 48
    _Height ＝ 高度
    _BottomMenu ＝ 底部列表
    _MenuNum ＝ 项目数 ＋ 1
    _Narrow ＝ 真
    _SelectMenu ＝ 1
    _Slowmotion ＝ 假
    _Progressbarmotion ＝ 假
    _菜单项点燃次数 ＝ 0
    .计次循环首 (项目数 ＋ 1, )
        加入成员 (_导航项点燃次数, 0)
    .计次循环尾 ()
    _空白区点燃次数 ＝ 0
    .判断开始 (是否为空 (进度条颜色))
        _ProgressColor ＝ 取颜色值 (0, 95, 184)
    .默认
        _ProgressColor ＝ 进度条颜色
    .判断结束
    ' *****************************************************
    ' 加入导航项
    .计次循环首 (项目数, 局_循环计数)
        加入成员 (_Item, 返回导航项 (5, 53 ＋ 4 × (局_循环计数 － 1) ＋ 34 × (局_循环计数 － 1), 38, 34))
    .计次循环尾 ()
    加入成员 (_Item, 返回导航项 (5, 高度 － 47 － 32, 38, 34, “设置”, , “M”))
    ' *****************************************************
    返回 (初始化 (hWnd, 0, 31, _Width, _Height － 31, #组件_侧边导航, “侧边导航_Ex”, , , , , , , , , , , ))

.子程序 _ObjProc, 整数型, 公开, 虚函数,组件消息.返回值:0默认处理，1程序处理。
    .参数 hWnd, 整数型
    .参数 hObj, 整数型
    .参数 uMsg, 整数型
    .参数 wParam, 整数型
    .参数 lParam, 整数型

    .判断开始 (uMsg ＝ #事件_绘画)
        PaintBackground (hObj)
    .判断 (uMsg ＝ #事件_创建)
        _hObj ＝ hObj
        _TextmatPiont ＝ 文本格式_创建 ()
        _FontPiont ＝ 字体_创建 (“微软雅黑”, 14)
        文本格式_置对齐 (_TextmatPiont, #对齐_横向居中纵向居中)
        文本格式_置行对齐 (_TextmatPiont, #对齐_横向居左纵向居上)
        _IconTextmaPoint ＝ 文本格式_创建 ()
        _IconFontPoint ＝ 字体_创建 (“Segoe Fluent Icons”, 16)
        文本格式_置对齐 (_IconTextmaPoint, #对齐_横向居左纵向居中)
        文本格式_置行对齐 (_IconTextmaPoint, #对齐_横向居左纵向居中)
        创建进度条 ()
    .判断 (uMsg ＝ #事件_鼠标位置被移动)
        ' 通过判断组件是否已经进入了单击事件，避免事件执行时修改鼠标位置
        .如果真 (_Progressbarmotion ＝ 假)
            _Top ＝ 取高位 (lParam)
            _Left ＝ 取低位 (lParam)
        .如果真结束
        子类组件判断 (#事件_鼠标位置被移动)
        ' 调试输出 (“Normal:” ＋ 到文本 (_Top) ＋ “,” ＋ 到文本 (_Left))
    .判断 (uMsg ＝ #事件_鼠标左键被放开)
        _Top ＝ 取高位 (lParam)
        _Left ＝ 取低位 (lParam)
        子类组件判断 (#事件_鼠标左键被放开)
        ' 调试输出 (“Click:” ＋ 到文本 (_Top) ＋ “,” ＋ 到文本 (_Left))
    .判断 (uMsg ＝ #事件_离开组件)
        _Slowmotion ＝ 假
        _菜单项点燃次数 ＝ 0
        连续赋值 (0, _菜单项点燃次数)
        _Top ＝ 取高位 (lParam)
        _Left ＝ 取低位 (lParam)
        PaintObj (_hWnd, _hObj)
    .默认
        
    .判断结束
    返回 (0)

.子程序 PaintObj, , , 2.组件绘制事件
    .参数 窗口句柄, 整数型
    .参数 组件句柄, 整数型, , 组件句柄
    .参数 组件状态, 整数型, 可空, 组件状态
    .参数 子类组件名, 整数型, 可空
    .参数 子类组件索引, 整数型, 可空
    .局部变量 Brush, Exs_PaintStruct
    .局部变量 局_循环计数, 整数型

    Ex_BeginPaint (组件句柄, Brush)
    图形_平滑模式 (Brush.mGraphics, #平滑模式_最佳质量)
    图形_文本渲染模式 (Brush.mGraphics, #文本渲染模式_ClearType文本和hinting技术)
    ' *****************************************************
    ' 绘制背景
    图形_填充_矩形 (Brush.mGraphics, MakeRCF (0, 0, 320, _Height), RGB2ARGB (取颜色值 (32, 32, 32)))
    ' *****************************************************
    ' 点燃状态
    .判断开始 (组件状态 ＝ #状态_点燃)
        ' 绘制菜单项
        .如果真 (子类组件名 ＝ #子类组件_菜单项)
            图形_填充_圆角矩形 (Brush.mGraphics, MakeRCF (5, 3, 38, 34), 3, RGB2ARGB (取颜色值 (46, 46, 46), 255))
            图形_画文本 (组件句柄, Brush.mGraphics, MakeRCF (15, 11, 16, 16), A2W (“洝), _IconFontPoint, RGB2ARGB (#白色), _IconTextmaPoint)
        .如果真结束
        ' 依次绘制导航项
        .如果真 (子类组件名 ＝ #子类组件_导航项)
            .判断开始 (子类组件索引 ＝ _SelectMenu)
                图形_填充_圆角矩形 (Brush.mGraphics, MakeRCF (5, _Item [子类组件索引].顶边, _Item [子类组件索引].宽度, _Item [子类组件索引].高度), 3, RGB2ARGB (取颜色值 (41, 41, 41)))
            .默认
                图形_填充_圆角矩形 (Brush.mGraphics, MakeRCF (5, _Item [子类组件索引].顶边, _Item [子类组件索引].宽度, _Item [子类组件索引].高度), 3, RGB2ARGB (取颜色值 (46, 46, 46)))
            .判断结束
            
        .如果真结束
        
    .默认
        
    .判断结束
    ' *****************************************************
    ' 按下状态
    .判断开始 (组件状态 ＝ #状态_按下)
        ' 绘制菜单项
        .如果真 (子类组件名 ＝ #子类组件_菜单项)
            图形_填充_圆角矩形 (Brush.mGraphics, MakeRCF (5, 3, 38, 34), 3, RGB2ARGB (取颜色值 (41, 41, 41), 255))
            图形_画文本 (组件句柄, Brush.mGraphics, MakeRCF (15, 11, 16, 16), A2W (“洝), _IconFontPoint, RGB2ARGB (#白色, 255), _IconTextmaPoint)
            _Narrow ＝ 取反 (_Narrow) ' 修改收缩状态
            ' 调试输出 (“收缩状态：” ＋ 到文本 (_Narrow))
            .判断开始 (_Narrow ＝ 真)
                .计次循环首 (_MenuNum, 局_循环计数)
                    _Item [局_循环计数].宽度 ＝ 38
                .计次循环尾 ()
            .默认
                .计次循环首 (_MenuNum, 局_循环计数)
                    _Item [局_循环计数].宽度 ＝ 310
                .计次循环尾 ()
                
            .判断结束
            _Slowmotion ＝ 真
            _Progressbarmotion ＝ 真
            EnableWindow (_hWnd, 假)
            .判断开始 (_Narrow ＝ 假)
                缓动特效_创建 (#缓动类型_三次方缓动_Out, 200, 10, 48, 320, 整数到子程序指针 (类_取方法指针 (取指针 (), 90 ＋ 7)), 取指针 (), 假, _hObj, 3)
                .判断循环首 (宽度 () ≠ 320)
                .判断循环尾 ()
                _Slowmotion ＝ 假
                EnableWindow (_hWnd, 真)
                _Progressbarmotion ＝ 假
            .默认
                缓动特效_创建 (#缓动类型_三次方缓动_Out, 200, 10, 320, 48, 整数到子程序指针 (类_取方法指针 (取指针 (), 90 ＋ 7)), 取指针 (), 假, _hObj, 3)
                .判断循环首 (宽度 () ≠ 48)
                .判断循环尾 ()
                _Slowmotion ＝ 假
                _Progressbarmotion ＝ 假
                EnableWindow (_hWnd, 真)
            .判断结束
            .计次循环首 (_MenuNum, 局_循环计数)
                图形_画文本 (_hObj, Brush.mGraphics, MakeRCF (48, _Item [局_循环计数].顶边 ＋ 9, 256, 20), A2W (_Item [局_循环计数].标题), _FontPiont, RGB2ARGB (#白色), _TextmatPiont)
            .计次循环尾 ()
            
        .如果真结束
        ' 绘制导航项
        .如果真 (子类组件名 ＝ #子类组件_导航项)
            .判断开始 (子类组件索引 ≠ _SelectMenu)
                _SelectMenu ＝ 子类组件索引 ' 设置当前选中项]
                ' 调试输出 (“当前选中项：” ＋ 到文本 (_SelectMenu))
                图形_填充_圆角矩形 (Brush.mGraphics, MakeRCF (5, _Item [子类组件索引].顶边, _Item [子类组件索引].宽度, _Item [子类组件索引].高度), 3, RGB2ARGB (取颜色值 (41, 41, 41)))
                缓动特效_创建 (#缓动类型_弹性缓动, 15, 1, _Progressbar.顶边 (), _Item [_SelectMenu].顶边 ＋ 40, 整数到子程序指针 (类_取方法指针 (取指针 (), 90 ＋ 7)), 取指针 (), 真, _Progressbar.取组件句柄 (), 2)
                _Progressbarmotion ＝ 假
                .如果真 (_ClickFuntion ≠ 整数到子程序指针 (0))
                    启动线程 (_ClickFuntion, , )
                .如果真结束
                
            .默认
                图形_填充_圆角矩形 (Brush.mGraphics, MakeRCF (5, _Item [子类组件索引].顶边, _Item [子类组件索引].宽度, _Item [子类组件索引].高度), 3, RGB2ARGB (取颜色值 (46, 46, 46)))
                _Progressbarmotion ＝ 假
            .判断结束
            
        .如果真结束
        
    .默认
        
    .判断结束
    
    ' *****************************************************
    ' 通用状态绘制
    .如果真 (组件状态 ≠ #状态_按下)
        图形_画文本 (组件句柄, Brush.mGraphics, MakeRCF (15, 11, 16, 16), A2W (“洝), _IconFontPoint, RGB2ARGB (#白色), _IconTextmaPoint)
    .如果真结束
    .如果真 (组件状态 ≠ #状态_按下 且 组件状态 ≠ #状态_点燃)
        图形_填充_圆角矩形 (Brush.mGraphics, MakeRCF (5, _Item [_SelectMenu].顶边, _Item [_SelectMenu].宽度, _Item [_SelectMenu].高度), 3, RGB2ARGB (取颜色值 (46, 46, 46)))
    .如果真结束
    .如果真 (组件状态 ＝ #状态_点燃 且 子类组件索引 ≠ _SelectMenu)
        图形_填充_圆角矩形 (Brush.mGraphics, MakeRCF (5, _Item [_SelectMenu].顶边, _Item [_SelectMenu].宽度, _Item [_SelectMenu].高度), 3, RGB2ARGB (取颜色值 (46, 46, 46)))
    .如果真结束
    .如果真 (组件状态 ＝ #状态_按下)
        .如果真 (子类组件名 ≠ #子类组件_菜单项)
            图形_画文本 (组件句柄, Brush.mGraphics, MakeRCF (15, 11, 16, 16), A2W (“洝), _IconFontPoint, RGB2ARGB (#白色), _IconTextmaPoint)
        .如果真结束
        .如果真 (子类组件名 ≠ #子类组件_导航项)
            ' 绘制被选中的导航项
            图形_填充_圆角矩形 (Brush.mGraphics, MakeRCF (5, _Item [_SelectMenu].顶边, _Item [_SelectMenu].宽度, _Item [_SelectMenu].高度), 3, RGB2ARGB (取颜色值 (46, 46, 46)))
        .如果真结束
        
    .如果真结束
    ' 绘制导航项文本
    .如果真 (_Narrow ＝ 假)
        .计次循环首 (_MenuNum, 局_循环计数)
            图形_画文本 (_hObj, Brush.mGraphics, MakeRCF (48, _Item [局_循环计数].顶边 ＋ 7, 256, 20), A2W (_Item [局_循环计数].标题), _FontPiont, RGB2ARGB (#白色), _TextmatPiont)
        .计次循环尾 ()
    .如果真结束
    ' 绘制导航项图标
    .计次循环首 (_MenuNum, 局_循环计数)
        .如果真 (_Item [局_循环计数].图标字符 ≠ “”)
            图形_文本渲染模式 (Brush.mGraphics, #文本渲染模式_抗锯齿和hinting技术)
            .计次循环首 (_MenuNum, 局_循环计数)
                图形_画文本 (_hObj, Brush.mGraphics, MakeRCF (16, _Item [局_循环计数].顶边 ＋ 9, 17, 17), A2W (_Item [局_循环计数].图标字符), _IconFontPoint, RGB2ARGB (#白色), _IconTextmaPoint)
            .计次循环尾 ()
        .如果真结束
        
    .计次循环尾 ()
    .计次循环首 (_MenuNum, 局_循环计数)
        .如果真 (_Item [局_循环计数].图标 ≠ 到字节集 (“”))
            .计次循环首 (_MenuNum, 局_循环计数)
                图形_绘图 (Brush.mGraphics, 图像_创建自字节集 (_Item [局_循环计数].图标, ), MakeRCF (16, _Item [局_循环计数].顶边 ＋ 9, 16, 16), 255, 真)
            .计次循环尾 ()
        .如果真结束
        
    .计次循环尾 ()
    Ex_EndPaint (组件句柄, Brush)

.子程序 PaintBackground, , , 3.组件背景绘制
    .参数 hObj, 整数型
    .局部变量 Brush, Exs_PaintStruct
    .局部变量 局_循环计数, 整数型

    Ex_BeginPaint (hObj, Brush)
    图形_平滑模式 (Brush.mGraphics, #平滑模式_最佳质量)
    图形_文本渲染模式 (Brush.mGraphics, #文本渲染模式_ClearType文本和hinting技术)
    图形_填充_矩形 (Brush.mGraphics, MakeRCF (0, 0, 320, _Height), RGB2ARGB (取颜色值 (32, 32, 32)))
    ' *****************************************************
    ' 在执行缓动效果时组件移动触发组件重画，通过判断是否为组件移动决定是否绘制点燃状态的菜单项
    .如果真 (_Slowmotion ＝ 真)
        图形_填充_圆角矩形 (Brush.mGraphics, MakeRCF (5, 3, 38, 34), 3, RGB2ARGB (取颜色值 (48, 48, 48), 255))
    .如果真结束
    ' *****************************************************
    ' 通用状态绘制
    图形_画文本 (hObj, Brush.mGraphics, MakeRCF (15, 11, 16, 16), A2W (“洝), _IconFontPoint, RGB2ARGB (#白色), _IconTextmaPoint)
    图形_填充_圆角矩形 (Brush.mGraphics, MakeRCF (5, _Item [_SelectMenu].顶边, _Item [_SelectMenu].宽度, 34), 3, RGB2ARGB (取颜色值 (46, 46, 46), 255))
    .如果真 (_MenuNum ＞ 0)
        .计次循环首 (_MenuNum, 局_循环计数)
            .如果真 (_Item [局_循环计数].图标字符 ≠ “”)
                图形_文本渲染模式 (Brush.mGraphics, #文本渲染模式_抗锯齿和hinting技术)
                .计次循环首 (_MenuNum, 局_循环计数)
                    图形_画文本 (_hObj, Brush.mGraphics, MakeRCF (16, _Item [局_循环计数].顶边 ＋ 9, 17, 17), A2W (_Item [局_循环计数].图标字符), _IconFontPoint, RGB2ARGB (#白色), _IconTextmaPoint)
                .计次循环尾 ()
            .如果真结束
            
        .计次循环尾 ()
        .计次循环首 (_MenuNum, 局_循环计数)
            .如果真 (_Item [局_循环计数].图标 ≠ 到字节集 (“”))
                .计次循环首 (_MenuNum, 局_循环计数)
                    图形_绘图 (Brush.mGraphics, 图像_创建自字节集 (_Item [局_循环计数].图标, ), MakeRCF (16, _Item [局_循环计数].顶边 ＋ 9, 16, 16), 255, 真)
                .计次循环尾 ()
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    .如果真 (宽度 () ＝ 320)
        延迟 (50) ' 防止闪烁
        图形_文本渲染模式 (Brush.mGraphics, #文本渲染模式_ClearType文本和hinting技术)
        .计次循环首 (_MenuNum, 局_循环计数)
            图形_画文本 (_hObj, Brush.mGraphics, MakeRCF (48, _Item [局_循环计数].顶边 ＋ 7, 256, 20), A2W (_Item [局_循环计数].标题), _FontPiont, RGB2ARGB (#白色), _TextmatPiont)
        .计次循环尾 ()
    .如果真结束
    Ex_EndPaint (hObj, Brush)

.子程序 子类组件判断, , , 4.子类组件判断
    .参数 参_事件, 整数型
    .局部变量 局_循环计数, 整数型, 静态

    ' *****************************************************
    ' 点燃状态判断
    .判断开始 (参_事件 ＝ #事件_鼠标位置被移动)
        ' 菜单项被点燃
        .判断开始 (_Top ＞ 3 且 _Top ＜ 37 且 _Left ＞ 5 且 _Left ＜ 53)
            _菜单项点燃次数 ＝ _菜单项点燃次数 ＋ 1
            _空白区点燃次数 ＝ 0
            .如果真 (_菜单项点燃次数 ＝ 1)
                PaintObj (_hWnd, _hObj, #状态_点燃, #子类组件_菜单项)
            .如果真结束
            
        .默认
            _菜单项点燃次数 ＝ 0
        .判断结束
        ' 导航项被点燃
        .计次循环首 (_MenuNum, 局_循环计数)
            .判断开始 (_Top ＞ _Item [局_循环计数].顶边 且 _Top ＜ _Item [局_循环计数].顶边 ＋ _Item [局_循环计数].高度 且 _Left ＞ 5 且 _Left ＜ _Item [局_循环计数].宽度 ＋ 5)
                _导航项点燃次数 [局_循环计数] ＝ _导航项点燃次数 [局_循环计数] ＋ 1
                _空白区点燃次数 ＝ 0
                .如果真 (_导航项点燃次数 [局_循环计数] ＝ 1)
                    PaintObj (_hWnd, _hObj, #状态_点燃, #子类组件_导航项, 局_循环计数)
                .如果真结束
                跳出循环 ()
            .默认
                _导航项点燃次数 [局_循环计数] ＝ 0
            .判断结束
            
        .计次循环尾 ()
    .默认
        
    .判断结束
    .如果真 (_菜单项点燃次数 ＝ 0)
        .如果真 (检查数组 (_导航项点燃次数, 0) ＝ 假)
            _空白区点燃次数 ＝ _空白区点燃次数 ＋ 1
            .如果真 (_空白区点燃次数 ＝ 1)
                PaintObj (_hWnd, _hObj)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    ' *****************************************************
    ' 单击状态判断
    .判断开始 (参_事件 ＝ #事件_鼠标左键被放开)
        ' 菜单栏被单击
        .判断开始 (_Top ＞ 3 且 _Top ＜ 37 且 _Left ＞ 5 且 _Left ＜ 53)
            PaintObj (_hWnd, _hObj, #状态_按下, #子类组件_菜单项)
            ' 调试输出 (“菜单按钮被按下”)
        .默认
            PaintObj (_hWnd, _hObj)
        .判断结束
        
        .判断开始 (_Narrow ＝ 真)
            ' 收缩状态为真时
            .计次循环首 (_MenuNum, 局_循环计数)
                ' 导航项被单击
                .判断开始 (_Top ＞ _Item [局_循环计数].顶边 且 _Top ＜ _Item [局_循环计数].顶边 ＋ _Item [局_循环计数].高度 且 _Left ＞ 5 且 _Left ＜ 43)
                    _Progressbarmotion ＝ 真 ' 进入单击事件执行状态
                    PaintObj (_hWnd, _hObj, #状态_按下, #子类组件_导航项, 局_循环计数)
                .默认
                    
                .判断结束
                
                
            .计次循环尾 ()
        .默认
            ' 收缩状态为假时
            .计次循环首 (_MenuNum, 局_循环计数)
                ' 导航项被单击
                .判断开始 (_Top ＞ _Item [局_循环计数].顶边 且 _Top ＜ _Item [局_循环计数].顶边 ＋ _Item [局_循环计数].高度 且 _Left ＞ 5 且 _Left ＜ 315)
                    _Progressbarmotion ＝ 真 ' 进入单击事件执行状态
                    PaintObj (_hWnd, _hObj, #状态_按下, #子类组件_导航项, 局_循环计数)
                .默认
                    
                .判断结束
                
                
            .计次循环尾 ()
            
        .判断结束
        
    .默认
        
    .判断结束
    

.子程序 加入项目, , 公开, 5.
    .参数 参_项目索引, 整数型
    .参数 参_标题, 文本型
    .参数 参_图标, 字节集, 可空
    .参数 参_图标字符, 文本型, 可空

    _Item [参_项目索引].标题 ＝ 参_标题
    _Item [参_项目索引].图标 ＝ 参_图标
    _Item [参_项目索引].图标字符 ＝ 参_图标字符
    重画 ()

.子程序 返回导航项, 导航项, , 6.
    .参数 左边, 整数型
    .参数 顶边, 整数型
    .参数 宽度, 整数型
    .参数 高度, 整数型
    .参数 标题, 文本型, 可空
    .参数 图标, 字节集, 可空
    .参数 图标字符, 文本型, 可空
    .局部变量 返回值, 导航项

    返回值.左边 ＝ 左边
    返回值.顶边 ＝ 顶边
    返回值.宽度 ＝ 宽度
    返回值.高度 ＝ 高度
    返回值.标题 ＝ 标题
    返回值.图标 ＝ 图标
    返回值.图标字符 ＝ 图标字符
    返回 (返回值)

.子程序 缓动任务_组件, , , 7.附加参数1：组件句柄 附加参数2:1.左边2.顶边3.宽度4.高度
    .参数 进度, 双精度小数型
    .参数 当前缓动值, 双精度小数型
    .参数 总帧数, 整数型
    .参数 当前帧数, 整数型
    .参数 是否停止缓动, 逻辑型, 参考
    .参数 附加参数1, 整数型
    .参数 附加参数2, 整数型

    .判断开始 (附加参数2 ＝ 1)
        组件_左边 (附加参数1, 当前缓动值)
    .判断 (附加参数2 ＝ 2)
        组件_顶边 (附加参数1, 当前缓动值)
    .判断 (附加参数2 ＝ 3)
        组件_宽度 (附加参数1, 当前缓动值)
    .判断 (附加参数2 ＝ 4)
        组件_高度 (附加参数1, 当前缓动值)
    .默认
        
    .判断结束
    

.子程序 创建进度条, , , 8.
    .局部变量 mImage, 整数型
    .局部变量 mGraphics, 整数型
    .局部变量 mPNG, 字节集

    _Progressbar.创建 (_hWnd, 4, _Item [_SelectMenu].顶边 ＋ 40, 4, 16, 到字节集 (“”))
    mImage ＝ 图像_创建自像素格式 (4, 16)
    GdipGetImageGraphicsContext (mImage, mGraphics)
    GdipGraphicsClear (mGraphics, 0)
    GdipSetSmoothingMode (mGraphics, #平滑模式_最佳质量)
    图形_填充_圆角矩形 (mGraphics, MakeRCF (0, 0, 4, 16), 3, RGB2ARGB (_ProgressColor))
    图形_填充_矩形 (mGraphics, MakeRCF (1, 2, 1, 11), RGB2ARGB (_ProgressColor))
    图形_填充_矩形 (mGraphics, MakeRCF (2, 2, 1, 11), RGB2ARGB (_ProgressColor))
    图形_销毁 (mGraphics)
    mPNG ＝ 图像_保存到字节集 (mImage, #图像格式_PNG)
    图像_销毁 (mImage)
    _Progressbar.图片 (mPNG)

.子程序 事件_导航栏被单击, , 公开, 9.
    .参数 回调指针, 子程序指针

    _ClickFuntion ＝ 回调指针

.子程序 现行选中项, 整数型, 公开, 10.
    返回 (_SelectMenu)

.子程序 检查数组, 逻辑型, , 11.
    .参数 参_数组, 整数型, 数组
    .参数 参_要查找的元素, 整数型
    .局部变量 i, 整数型

    .计次循环首 (取数组成员数 (参_数组), i)
        .如果真 (参_要查找的元素 ≠ 参_数组 [i])
            返回 (真)
        .如果真结束
        
    .计次循环尾 ()
    返回 (假)

